{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "af6f4f0a_eb192e21",
        "filename": "src/biccommands.cpp",
        "patchSetId": 5
      },
      "lineNbr": 46,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-06-17T01:18:18Z",
      "side": 1,
      "message": "`auto`?  I don\u0027t think `size_t` is appropriate for a byte-pattern.\n\nI mentioned later on that maybe an `array\u003cuint8_t, 2\u003e` (or 4) might be more appropriate here.",
      "range": {
        "startLine": 46,
        "startChar": 10,
        "endLine": 46,
        "endChar": 16
      },
      "revId": "9cbebde0fb40e600d00ef7b6e30bc9f7a6cf520f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bc2c82d4_b4f56476",
        "filename": "src/biccommands.cpp",
        "patchSetId": 5
      },
      "lineNbr": 46,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2023-06-26T07:17:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "af6f4f0a_eb192e21",
      "range": {
        "startLine": 46,
        "startChar": 10,
        "endLine": 46,
        "endChar": 16
      },
      "revId": "9cbebde0fb40e600d00ef7b6e30bc9f7a6cf520f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6947b687_432f3226",
        "filename": "src/biccommands.cpp",
        "patchSetId": 5
      },
      "lineNbr": 106,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-06-17T01:18:18Z",
      "side": 1,
      "message": "Generally we shouldn\u0027t see a constant like this being used to initialize an array.  Use a dynamic structure of some sort if that\u0027s what you need.  Especially because we have 8 hosts and you\u0027re allocating over a page of memory as a result of this structure.\n\nYou\u0027ve already got the dimmLoops structure which is looked up by hostId.  That seems sufficient.",
      "revId": "9cbebde0fb40e600d00ef7b6e30bc9f7a6cf520f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bfabaacc_03acbfa5",
        "filename": "src/biccommands.cpp",
        "patchSetId": 5
      },
      "lineNbr": 106,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2023-06-26T07:17:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6947b687_432f3226",
      "revId": "9cbebde0fb40e600d00ef7b6e30bc9f7a6cf520f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ab08fbb_2693f8fb",
        "filename": "src/biccommands.cpp",
        "patchSetId": 5
      },
      "lineNbr": 109,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-06-17T01:18:18Z",
      "side": 1,
      "message": "Still see a static function member.  Why can\u0027t we add this to the `dimmLoop` structure?",
      "range": {
        "startLine": 108,
        "startChar": 0,
        "endLine": 109,
        "endChar": 52
      },
      "revId": "9cbebde0fb40e600d00ef7b6e30bc9f7a6cf520f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7165e635_68fef8c2",
        "filename": "src/biccommands.cpp",
        "patchSetId": 5
      },
      "lineNbr": 109,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2023-06-26T07:17:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0ab08fbb_2693f8fb",
      "range": {
        "startLine": 108,
        "startChar": 0,
        "endLine": 109,
        "endChar": 52
      },
      "revId": "9cbebde0fb40e600d00ef7b6e30bc9f7a6cf520f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "385226e4_c9ed8d0f",
        "filename": "src/biccommands.cpp",
        "patchSetId": 5
      },
      "lineNbr": 111,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-06-17T01:18:18Z",
      "side": 1,
      "message": "Pretty sure size_t isn\u0027t what you intended to use here.  You can use `auto`  or uint16?\n\nHonestly I\u0027m surprised we don\u0027t just use a uint32_t for everything here since the post codes are 32 bit in size.  Or an `array\u003cuint8_t, 2\u003e`.  We can construct the array directly from the position in the original `data` array.",
      "range": {
        "startLine": 111,
        "startChar": 4,
        "endLine": 111,
        "endChar": 11
      },
      "revId": "9cbebde0fb40e600d00ef7b6e30bc9f7a6cf520f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7f09e0d9_47afb90e",
        "filename": "src/biccommands.cpp",
        "patchSetId": 5
      },
      "lineNbr": 111,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2023-06-26T07:17:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "385226e4_c9ed8d0f",
      "range": {
        "startLine": 111,
        "startChar": 4,
        "endLine": 111,
        "endChar": 11
      },
      "revId": "9cbebde0fb40e600d00ef7b6e30bc9f7a6cf520f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2d9c2f3_a84bdb35",
        "filename": "src/biccommands.cpp",
        "patchSetId": 5
      },
      "lineNbr": 126,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-06-17T01:18:18Z",
      "side": 1,
      "message": "How can you be certain that we won\u0027t get 2 DIMM loops in a row?  Is there something that ensures after \"DDEE + minor code\" we get something other than a `DDEE`?",
      "revId": "9cbebde0fb40e600d00ef7b6e30bc9f7a6cf520f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "af5779af_9ffd2118",
        "filename": "src/biccommands.cpp",
        "patchSetId": 5
      },
      "lineNbr": 126,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2023-06-21T07:09:05Z",
      "side": 1,
      "message": "Hi Patrick, when we got 2 dimm loops the postcode will keep looping like this:\n[DDEE0000][DDEE0002][DDEE0001][DDEE0A10][DDEE0009][DDEE4001][DDEE0000][DDEE0002][DDEE0002][DDEE00A2][DDEE0009][DDEE4001] ....\nAnd it won\u0027t stop, keep repeating postcode pattern as above. And I ask from Bios team and they said it won\u0027t happen with postcode without DDEE prefix showing up when dimm loop error happens.",
      "parentUuid": "b2d9c2f3_a84bdb35",
      "revId": "9cbebde0fb40e600d00ef7b6e30bc9f7a6cf520f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fed2e5c3_c77694d5",
        "filename": "src/biccommands.cpp",
        "patchSetId": 5
      },
      "lineNbr": 132,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-06-17T01:18:18Z",
      "side": 1,
      "message": "Can this be constexpr?\n\nMight want to make it a `std::array\u003cuint8_t, 4\u003e`.\n\nYou can also look at `std::ranges::equal` and `std::ranges::starts_with` for some of the comparisons you need to do.  Unfortunately, `starts_with` isn\u0027t available until C++23, but the documentation for it gives an alternative approach using `std::ranges::mismatch`.  That might be too much work.",
      "range": {
        "startLine": 132,
        "startChar": 11,
        "endLine": 132,
        "endChar": 37
      },
      "revId": "9cbebde0fb40e600d00ef7b6e30bc9f7a6cf520f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "71f4ffaa_c40cc98f",
        "filename": "src/biccommands.cpp",
        "patchSetId": 5
      },
      "lineNbr": 132,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2023-06-26T07:17:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fed2e5c3_c77694d5",
      "range": {
        "startLine": 132,
        "startChar": 11,
        "endLine": 132,
        "endChar": 37
      },
      "revId": "9cbebde0fb40e600d00ef7b6e30bc9f7a6cf520f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0355582f_1c5426ed",
        "filename": "src/biccommands.cpp",
        "patchSetId": 5
      },
      "lineNbr": 145,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-06-17T01:18:18Z",
      "side": 1,
      "message": "This seems strange to push back the vector of data just to keep a count?",
      "revId": "9cbebde0fb40e600d00ef7b6e30bc9f7a6cf520f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f1769506_d57f0848",
        "filename": "src/biccommands.cpp",
        "patchSetId": 5
      },
      "lineNbr": 145,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2023-06-21T07:09:05Z",
      "side": 1,
      "message": "Hi Patrick, the dimm loop patterns were being stored and used for decode and show its description on debug card (This will be the next feature. still ongoing). This commit is for dimm loop detection.",
      "parentUuid": "0355582f_1c5426ed",
      "revId": "9cbebde0fb40e600d00ef7b6e30bc9f7a6cf520f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "000994a9_ff86b311",
        "filename": "src/biccommands.cpp",
        "patchSetId": 5
      },
      "lineNbr": 149,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-06-17T01:18:18Z",
      "side": 1,
      "message": "I still don\u0027t understand this code.  Why are there going to be 6 * error count for remaining buffers?\n\nWhy can\u0027t we save the error count right away in line 142?  Still not enough documentation as to what is going on here.",
      "range": {
        "startLine": 148,
        "startChar": 0,
        "endLine": 149,
        "endChar": 42
      },
      "revId": "9cbebde0fb40e600d00ef7b6e30bc9f7a6cf520f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b5cfeeda_49bc6c89",
        "filename": "src/biccommands.cpp",
        "patchSetId": 5
      },
      "lineNbr": 149,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2023-06-21T07:09:05Z",
      "side": 1,
      "message": "Hi Patrick, here is the process and example of this code design:\n\nHere is the postcode continuously into this function:\n[DDEE0000] \u003c\u003d get anchor flag, which mean dimm loop pattern is starting\n[DDEE0002] \u003c\u003d which meaning there will be 2 dimm loops pattern coming, \n              total 12 postcodes. (6 byte as a group)\n[DDEE0001] \u003c\u003d keep counting and storing.\n[DDEE0A10] \u003c\u003d keep counting and storing.\n[DDEE0009] \u003c\u003d keep counting and storing.\n[DDEE4001] \u003c\u003d keep counting and storing.\n[DDEE0000] \u003c\u003d keep counting and storing.\n[DDEE0002] \u003c\u003d keep counting and storing.\n[DDEE0002] \u003c\u003d keep counting and storing.\n[DDEE00A2] \u003c\u003d keep counting and storing.\n[DDEE0009] \u003c\u003d keep counting and storing.\n[DDEE4001] \u003c\u003d keep counting and this is 12th postcode. And set up the error \n             count in structure,  which means I got the whole patterns and \n\t     all being stored. After that, this dimm loop pattern will keep\n\t     repeating, no need to check again",
      "parentUuid": "000994a9_ff86b311",
      "range": {
        "startLine": 148,
        "startChar": 0,
        "endLine": 149,
        "endChar": 42
      },
      "revId": "9cbebde0fb40e600d00ef7b6e30bc9f7a6cf520f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}